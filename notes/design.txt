there are objects, characters, rooms, inventories, and items.
objects, characters, and rooms each have inventories that contain items
When an interaction is in progress a menu is pulled up -> character, inventory, room, object, and start menus, submenus exist

Inventories control all item transactions
-> Drop, give, combine, trade

Objects, Rooms, Characters, and Inventories change based on the game stage
As a room is loaded each of these looks in the database to see if they have a state for the next stage, otherwise they remain in the current state (this needs to happen only once per stage to maintain inventories)

Once a character has talked or completed something, they have a default conversation loaded

Talking is done by option number which are numbered. This is an array of numbered lines that have the possible options in a linked list format.
So if option 1 is selected then it has a list of the options after it -> say 3,4,7. These 3 options are displayed. Each of these also have the options that they can call until the transaction is over.

No state is saved inbetween reloads on objects/characters that change due to a stage change.

Each character needs to have a finished variable for when they've already been talked to and a stage variable. When a stage change occurs the game is saved to save all state of nonchanging components

Sql state structure -> have a new subclass for staged data where read from db gets the state closest to the current game stage. Just add a stage value to these, make stage and code the primary key

Conversations -> save as JSON with {starting options: [1,2,3], {1 : text1, next options: [2,3,4]}, {2 : text2, next options : [3,4,5]}}. pull the JSON with json.loads to load into a dictionary

Items -> Uses:	Can be combined in an inventory, used on the player, used on an object or character
		 Transacted: dropped, given, recieved, picked up

		How to display transaction, how to get the current rooms inventory, combinatory logic


Character Inventory
	-> Combine
	-> Use/Consume
	-> Use on
	-> Drop

Room/Object Inventory (Passive Inventory)
	-> Take
	-> Put

Character Inventory
	-> Trade -> Give/Buy/Sell/Exchange/Take (Active Inventory)




game structure

Detective
---------
- inventory

Characters
----------
- inventory

Rooms
-----
- inventory
- move -> look through the neighbors and move to the room described
- Door -> every room has a door which is locked or unlocked, if its locked there is a message with it that so the room can be closed

Objects
-------
- search the object -> takes you to a menu where you can take the items in the object
- insert -> inserts an item from your inventory into the object

Items
-----
- held in an inventory
- has size (aka volume), weight, and whether or not the item is critical (critical items cannot be sold or discarded)
- use method
- consume amount

Inventory
---------
- Objects, characters, and rooms have an inventory of items
- contains the item code and amount of the item
- has a transfer method that moves a specified amount of an object from one inventory to another
- method 'use (item name)' calls the specified items use method and removes the consume amount of the item from your inventory

Commands
--------
1 word command (use, talk, inspect...)
[possible filler (to, with, at...)]
subject
to pass/drop/get an object you need to be 'in scope' with the object, character, or room.

Item Transaction
----------------
-> search ___ (room for the current room, object name for the object)
-> talk ___ person -> option to transfer items

Menus
-----
How to do menus?

Stages
------
The game stays static until an 'event' happens. Then their new status needs to be loaded
Needs a game status option and a 'done talking' option


Machinery Needed
----------------
1) Menus
2) Character interactions menus
3) Loading character state after an event change
4) How to talk to a character


____________________________________________________
Commands

mute stops all sounds
unmute unmutes sounds
start brings up the game menu
sound brings up the sound menu

when you enter a room is prints the description of the room, who is in it and what objects are there. Items present in the room must be searched for
move ___(room name) moves you to a new room if it is an available neighbor
talk ___(character name) brings up a character interaction menu -> then have item options, question, ...
search ___(room/object) brings up the inventory of them
inspect ___(person, object, item) gives more information about the subject
commands/help brings up the possible commands

